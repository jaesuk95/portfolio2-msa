version: '3.8'
services:
  # discovery-service:
  #   image: <discovery-service-image>
  #   # Add necessary configuration
  #   depends_on:
  #     - mariadb-server

  # apigateway-service:
  #   image: <apigateway-service-image>
  #   # Add necessary configuration
  #   depends_on:
  #     - discovery-service

  # config-service:
  #   image: <config-service-image>
  #   # Add necessary configuration
  #   depends_on:
  #     - discovery-service

  # user-service:
  #   image: <user-service-image>
  #   # Add necessary configuration
  #   depends_on:
  #     - discovery-service
  #     - mariadb-server

  # order-service:
  #   image: <order-service-image>
  #   # Add necessary configuration
  #   depends_on:
  #     - discovery-service
  #     - mariadb-server

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - 15672:15672
      - 5672:5672
      - 15671:15671
      - 5671:5671
      - 4369:4369
    networks:
      - ecommerce-network

  mariadb-server:
    image: jaesuk95/my_mariadb:1.0
    container_name: mariadb
    # Add necessary configuration
    environment:
      MYSQL_DATABASE: mydb
      MYSQL_ROOT_PASSWORD: admin
    ports:
      - 13306:3306
    networks:
      - ecommerce-network

  # zookeeper:
  #   image: wurstmeister/zookeeper
  #   ports:
  #     - "2181:2181"
  #   networks:
  #     my-network:
  #       ipv4_address: 172.18.0.100

  # kafka:
  #   image: wurstmeister/kafka
  #   ports:
  #     - "9092:9092"
  #   environment:
  #     KAFKA_ADVERTISED_HOST_NAME: 172.18.0.101
  #     KAFKA_CREATE_TOPICS: "test:1:1"
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   depends_on:
  #     - zookeeper
  #   networks:
  #     my-network:
  #       ipv4_address: 172.18.0.101

networks:
  ecommerce-network:
    # name: ecommerce-network
    external: true